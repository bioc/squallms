% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/updateXcmsObjFeatsFunctions.R
\name{logModelFeatProb}
\alias{logModelFeatProb}
\title{Model feature quality using a logistic regression}
\usage{
logModelFeatProb(
  feature_metrics,
  feature_labels,
  log_formula = feat_class ~ med_cor + med_snr,
  verbosity = 2
)
}
\arguments{
\item{feature_metrics}{A data.frame with columns used to construct the 
feature quality model.}

\item{feature_labels}{A character vector named with feature IDs and entries
corresponding to the peak quality (either "Good", "Bad", or NA).}

\item{log_formula}{The formula to use when predicting feature quality from
the feature metrics. This formula is passed to `glm` as-is, so make sure that
the predictive features exist in the feature_metrics data.frame.}

\item{verbosity}{Scalar value between zero and two determining how much 
diagnostic information is produced. Zero should return nothing, one should
return text-based progress markers, and 2 will return diagnostic plots.}
}
\value{
A numeric vector of probabilities returned by the logistic model
named by feature ID
}
\description{
After metrics have been extracted (typically with `extractChromMetrics`) and 
labeling has occurred (typically with `labelFeatsManual` or `labelFeatsLasso`),
a model can be built to robustly classify the peaks that were not labeled
based on the metrics. The default regression equation fits the med_cor and
med_snr columns in feature_metrics to the feature_labels, but additional
metrics can be passed as well (but be careful of overfitting!).
}
\examples{
msnexp_filled <- readRDS("vignettes/intro_xcms_filled.rds")
peak_data <- makeXcmsObjFlat(msnexp_filled)
feat_metrics <- extractChromMetrics(peak_data, verbosity = 0)
lasso_classes <- readRDS("vignettes/intro_lasso_labels.rds")
feat_probs <- logModelFeatProb(feat_metrics, lasso_classes)
}
